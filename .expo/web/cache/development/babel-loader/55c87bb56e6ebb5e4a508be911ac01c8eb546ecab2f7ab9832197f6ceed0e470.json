{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { auth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"../comp/firbase/firebase.settings\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function SignUp() {\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    email = _React$useState2[0],\n    setEmail = _React$useState2[1];\n  var _React$useState3 = React.useState(''),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    password = _React$useState4[0],\n    setPassword = _React$useState4[1];\n  var _React$useState5 = React.useState(''),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    confirmPassword = _React$useState6[0],\n    setConfirmPassword = _React$useState6[1];\n  var _React$useState7 = React.useState(''),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    err = _React$useState8[0],\n    setErr = _React$useState8[1];\n  var _React$useState9 = React.useState(true),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    isLogin = _React$useState10[0],\n    setIsLogin = _React$useState10[1];\n  var emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  var handleEmailSignUp = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!emailRegex.test(email)) {\n        setErr(\"The email must be a valid email format.\");\n        return;\n      }\n      if (!password) {\n        setErr(\"The Password field must not be empty.\");\n        return;\n      }\n      if (!confirmPassword) {\n        setErr(\"The Confirm Password field must not be empty.\");\n        return;\n      }\n      if (password !== confirmPassword) {\n        setErr(\"The Passwords do not match.\");\n        return;\n      }\n      try {\n        yield createUserWithEmailAndPassword(auth, email, password);\n      } catch (error) {\n        console.error(\"Error signing up with email and password:\", error);\n      }\n    });\n    return function handleEmailSignUp() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleGoogleSignUp = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var provider = new GoogleAuthProvider();\n      try {\n        yield signInWithPopup(auth, provider);\n      } catch (error) {\n        console.error(\"Error signing up with Google:\", error);\n      }\n    });\n    return function handleGoogleSignUp() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: \"Sign Up for TSM2.0\"\n    }), err ? _jsx(Text, {\n      style: {\n        color: 'red'\n      },\n      children: err\n    }) : null, _jsx(TextInput, {\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: setEmail,\n      style: {\n        borderWidth: 1,\n        width: 200,\n        marginBottom: 10\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Password\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true,\n      style: {\n        borderWidth: 1,\n        width: 200,\n        marginBottom: 10\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Confirm Password\",\n      value: confirmPassword,\n      onChangeText: setConfirmPassword,\n      secureTextEntry: true,\n      style: {\n        borderWidth: 1,\n        width: 200,\n        marginBottom: 10\n      }\n    }), _jsx(Button, {\n      title: \"Sign Up with Email\",\n      onPress: handleEmailSignUp\n    }), _jsx(Button, {\n      title: \"Sign Up with Google\",\n      onPress: handleGoogleSignUp\n    })]\n  });\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  header: {\n    width: '100%',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 15,\n    paddingBottom: 10,\n    paddingTop: 10\n  },\n  heading: {\n    fontSize: 24\n  }\n});","map":{"version":3,"names":["React","View","Text","Button","TextInput","StyleSheet","auth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","jsx","_jsx","jsxs","_jsxs","SignUp","_React$useState","useState","_React$useState2","_slicedToArray","email","setEmail","_React$useState3","_React$useState4","password","setPassword","_React$useState5","_React$useState6","confirmPassword","setConfirmPassword","_React$useState7","_React$useState8","err","setErr","_React$useState9","_React$useState10","isLogin","setIsLogin","emailRegex","handleEmailSignUp","_ref","_asyncToGenerator","test","error","console","apply","arguments","handleGoogleSignUp","_ref2","provider","style","styles","container","children","heading","color","placeholder","value","onChangeText","borderWidth","width","marginBottom","secureTextEntry","title","onPress","create","flex","backgroundColor","alignItems","justifyContent","header","flexDirection","paddingHorizontal","paddingBottom","paddingTop","fontSize"],"sources":["/home/dci-student/DCIFolder/TMSII/my-app/comp/SignUp.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, Button, TextInput, StyleSheet } from 'react-native';\nimport { auth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"../comp/firbase/firebase.settings\";\n\nexport function SignUp() {\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [confirmPassword, setConfirmPassword] = React.useState('');\n  const [err, setErr] = React.useState('');\n  const [isLogin, setIsLogin] = React.useState(true);\n  \n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n  const handleEmailSignUp = async () => {\n    if (!emailRegex.test(email)) {\n      setErr(\"The email must be a valid email format.\");\n      return;\n    }\n    if (!password) {\n      setErr(\"The Password field must not be empty.\");\n      return;\n    }\n    if (!confirmPassword) {\n      setErr(\"The Confirm Password field must not be empty.\");\n      return;\n    }\n    if (password !== confirmPassword) {\n      setErr(\"The Passwords do not match.\");\n      return;\n    }\n\n    try {\n      await createUserWithEmailAndPassword(auth, email, password);\n      // Navigate the user to your app's main screen after signing up\n    } catch (error) {\n      // Handle the error here\n      console.error(\"Error signing up with email and password:\", error);\n    }\n  };\n\n  const handleGoogleSignUp = async () => {\n    const provider = new GoogleAuthProvider();\n    try {\n      await signInWithPopup(auth, provider);\n      // Navigate the user to your app's main screen after signing up\n    } catch (error) {\n      console.error(\"Error signing up with Google:\", error);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Sign Up for TSM2.0</Text>\n      {err ? <Text style={{color: 'red'}}>{err}</Text> : null}\n      <TextInput\n        placeholder=\"Email\"\n        value={email}\n        onChangeText={setEmail}\n        style={{ borderWidth: 1, width: 200, marginBottom: 10 }}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n        style={{ borderWidth: 1, width: 200, marginBottom: 10 }}\n      />\n      <TextInput\n        placeholder=\"Confirm Password\"\n        value={confirmPassword}\n        onChangeText={setConfirmPassword}\n        secureTextEntry\n        style={{ borderWidth: 1, width: 200, marginBottom: 10 }}\n      />\n      <Button title=\"Sign Up with Email\" onPress={handleEmailSignUp} />\n      <Button title=\"Sign Up with Google\" onPress={handleGoogleSignUp} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  header: {\n    width: '100%',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 15,\n    paddingBottom: 10,\n    paddingTop: 10,\n  },\n  heading: {\n    fontSize: 24,\n  },\n});\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}