{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _React$useState = React.useState(''),\n  _React$useState2 = _slicedToArray(_React$useState, 2),\n  email = _React$useState2[0],\n  setEmail = _React$useState2[1];\nvar _React$useState3 = React.useState(''),\n  _React$useState4 = _slicedToArray(_React$useState3, 2),\n  password = _React$useState4[0],\n  setPassword = _React$useState4[1];\nvar handleEmailSignUp = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      yield auth().createUserWithEmailAndPassword(email, password);\n    } catch (error) {\n      console.error(\"Error signing up with email and password:\", error);\n    }\n  });\n  return function handleEmailSignUp() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar handleGoogleSignUp = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var _yield$GoogleSignin$s = yield GoogleSignin.signIn(),\n        idToken = _yield$GoogleSignin$s.idToken;\n      var googleCredential = auth.GoogleAuthProvider.credential(idToken);\n      yield auth().signInWithCredential(googleCredential);\n    } catch (error) {\n      console.error(\"Error signing up with Google:\", error);\n    }\n  });\n  return function handleGoogleSignUp() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport function SignUp() {\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: \"Sign Up for TSM2.0\"\n    }), _jsx(TextInput, {\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: setEmail,\n      style: {\n        borderWidth: 1,\n        width: 200,\n        marginBottom: 10\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Password\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true,\n      style: {\n        borderWidth: 1,\n        width: 200,\n        marginBottom: 10\n      }\n    }), _jsx(Button, {\n      title: \"Sign Up with Email\",\n      onPress: handleEmailSignUp\n    }), _jsx(Button, {\n      title: \"Sign Up with Google\",\n      onPress: handleGoogleSignUp\n    })]\n  });\n}\n;","map":{"version":3,"names":["_React$useState","React","useState","_React$useState2","_slicedToArray","email","setEmail","_React$useState3","_React$useState4","password","setPassword","handleEmailSignUp","_ref","_asyncToGenerator","auth","createUserWithEmailAndPassword","error","console","apply","arguments","handleGoogleSignUp","_ref2","_yield$GoogleSignin$s","GoogleSignin","signIn","idToken","googleCredential","GoogleAuthProvider","credential","signInWithCredential","SignUp","_jsxs","View","style","styles","container","children","_jsx","Text","heading","TextInput","placeholder","value","onChangeText","borderWidth","width","marginBottom","secureTextEntry","Button","title","onPress"],"sources":["/home/dci-student/DCIFolder/TMSII/my-app/comp/SignUp.js"],"sourcesContent":["import { View, Text, Button, TextInput } from 'react-native';\n\n\n\n\n\n    const [email, setEmail] = React.useState('');\n    const [password, setPassword] = React.useState('');\n\n    const handleEmailSignUp = async () => {\n  try {\n    await auth().createUserWithEmailAndPassword(email, password);\n    // You can navigate the user to your app's main screen after signing up here\n  } catch (error) {\n    console.error(\"Error signing up with email and password:\", error);\n  }\n};\n\n\nconst handleGoogleSignUp = async () => {\n  try {\n    // Get the users ID token\n    const { idToken } = await GoogleSignin.signIn();\n\n    // Create a Google credential with the token\n    const googleCredential = auth.GoogleAuthProvider.credential(idToken);\n\n    // Sign-in the user with the credential\n    await auth().signInWithCredential(googleCredential);\n    // You can navigate the user to your app's main screen after signing up here\n  } catch (error) {\n    console.error(\"Error signing up with Google:\", error);\n  }\n};\n\n\nexport function SignUp() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Sign Up for TSM2.0</Text>\n      <TextInput\n        placeholder=\"Email\"\n        value={email}\n        onChangeText={setEmail}\n        style={{ borderWidth: 1, width: 200, marginBottom: 10 }}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n        style={{ borderWidth: 1, width: 200, marginBottom: 10 }}\n      />\n      <Button title=\"Sign Up with Email\" onPress={handleEmailSignUp} />\n      <Button title=\"Sign Up with Google\" onPress={handleGoogleSignUp} />\n    </View>\n  );\n};\n\n"],"mappings":";;;;;;;;AAMI,IAAAA,eAAA,GAA0BC,KAAK,CAACC,QAAQ,CAAC,EAAE,CAAC;EAAAC,gBAAA,GAAAC,cAAA,CAAAJ,eAAA;EAArCK,KAAK,GAAAF,gBAAA;EAAEG,QAAQ,GAAAH,gBAAA;AACtB,IAAAI,gBAAA,GAAgCN,KAAK,CAACC,QAAQ,CAAC,EAAE,CAAC;EAAAM,gBAAA,GAAAJ,cAAA,CAAAG,gBAAA;EAA3CE,QAAQ,GAAAD,gBAAA;EAAEE,WAAW,GAAAF,gBAAA;AAE5B,IAAMG,iBAAiB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IACxC,IAAI;MACF,MAAMC,IAAI,CAAC,CAAC,CAACC,8BAA8B,CAACV,KAAK,EAAEI,QAAQ,CAAC;IAE9D,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACnE;EACF,CAAC;EAAA,gBAPSL,iBAAiBA,CAAA;IAAA,OAAAC,IAAA,CAAAM,KAAA,OAAAC,SAAA;EAAA;AAAA,GAO1B;AAGD,IAAMC,kBAAkB;EAAA,IAAAC,KAAA,GAAAR,iBAAA,CAAG,aAAY;IACrC,IAAI;MAEF,IAAAS,qBAAA,SAA0BC,YAAY,CAACC,MAAM,CAAC,CAAC;QAAvCC,OAAO,GAAAH,qBAAA,CAAPG,OAAO;MAGf,IAAMC,gBAAgB,GAAGZ,IAAI,CAACa,kBAAkB,CAACC,UAAU,CAACH,OAAO,CAAC;MAGpE,MAAMX,IAAI,CAAC,CAAC,CAACe,oBAAoB,CAACH,gBAAgB,CAAC;IAErD,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAAA,gBAdKI,kBAAkBA,CAAA;IAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAcvB;AAGD,OAAO,SAASW,MAAMA,CAAA,EAAG;EACvB,OACEC,KAAA,CAACC,IAAI;IAACC,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BC,IAAA,CAACC,IAAI;MAACL,KAAK,EAAEC,MAAM,CAACK,OAAQ;MAAAH,QAAA,EAAC;IAAkB,CAAM,CAAC,EACtDC,IAAA,CAACG,SAAS;MACRC,WAAW,EAAC,OAAO;MACnBC,KAAK,EAAErC,KAAM;MACbsC,YAAY,EAAErC,QAAS;MACvB2B,KAAK,EAAE;QAAEW,WAAW,EAAE,CAAC;QAAEC,KAAK,EAAE,GAAG;QAAEC,YAAY,EAAE;MAAG;IAAE,CACzD,CAAC,EACFT,IAAA,CAACG,SAAS;MACRC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAEjC,QAAS;MAChBkC,YAAY,EAAEjC,WAAY;MAC1BqC,eAAe;MACfd,KAAK,EAAE;QAAEW,WAAW,EAAE,CAAC;QAAEC,KAAK,EAAE,GAAG;QAAEC,YAAY,EAAE;MAAG;IAAE,CACzD,CAAC,EACFT,IAAA,CAACW,MAAM;MAACC,KAAK,EAAC,oBAAoB;MAACC,OAAO,EAAEvC;IAAkB,CAAE,CAAC,EACjE0B,IAAA,CAACW,MAAM;MAACC,KAAK,EAAC,qBAAqB;MAACC,OAAO,EAAE9B;IAAmB,CAAE,CAAC;EAAA,CAC/D,CAAC;AAEX;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}