{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport axios from 'axios';\nimport { FontAwesome5 } from '@expo/vector-icons';\nimport { useLoadFonts, fontMap } from \"../../fonts/useLoadFonts.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function FontFamilyDropdown(_ref) {\n  var onFontFamilyChange = _ref.onFontFamilyChange;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpen = _useState2[0],\n    setIsOpen = _useState2[1];\n  var fontsLoaded = useLoadFonts();\n  useEffect(function () {\n    axios.get('https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyCfy_P6OLwoben3quj00uUyvRxOFBWs-Bo').then(function (response) {\n      var kursiveFonts = response.data.items.filter(function (font) {\n        return font.category === 'handwriting';\n      }).map(function (font) {\n        return font.family;\n      });\n      setGoogleFonts(kursiveFonts);\n    }).catch(function (error) {\n      console.error(\"Error fetching fonts from Google Fonts API: \", error);\n    });\n  }, []);\n  var toggleDropdown = function toggleDropdown() {\n    setIsOpen(!isOpen);\n  };\n  return _jsxs(View, {\n    style: styles.dropdownContainer,\n    children: [_jsx(TouchableOpacity, {\n      style: styles.iconDropdown,\n      onPress: toggleDropdown,\n      children: _jsx(FontAwesome5, {\n        name: \"font\",\n        size: 24,\n        color: \"black\"\n      })\n    }), isOpen && _jsx(View, {\n      style: styles.dropdownMenu,\n      children: _jsx(FlatList, {\n        data: googleFonts,\n        renderItem: function renderItem(_ref2) {\n          var font = _ref2.item;\n          return _jsx(TouchableOpacity, {\n            style: styles.dropdownList,\n            onPress: function onPress() {\n              onFontFamilyChange(font);\n              setIsOpen(false);\n            },\n            children: _jsx(Text, {\n              style: {\n                fontFamily: font\n              },\n              children: font\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(font) {\n          return font;\n        }\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  dropdownContainer: {\n    flexDirection: 'row'\n  },\n  iconDropdown: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: '#f5f5f5'\n  },\n  dropdownMenu: {\n    maxHeight: 150,\n    overflow: 'scroll',\n    borderRadius: 8,\n    shadowOpacity: 0.1,\n    shadowRadius: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    backgroundColor: '#fff',\n    padding: 10\n  },\n  dropdownList: {\n    padding: 10\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","TouchableOpacity","FlatList","Dimensions","StyleSheet","axios","FontAwesome5","useLoadFonts","fontMap","jsx","_jsx","jsxs","_jsxs","FontFamilyDropdown","_ref","onFontFamilyChange","_useState","_useState2","_slicedToArray","isOpen","setIsOpen","fontsLoaded","get","then","response","kursiveFonts","data","items","filter","font","category","map","family","setGoogleFonts","catch","error","console","toggleDropdown","style","styles","dropdownContainer","children","iconDropdown","onPress","name","size","color","dropdownMenu","googleFonts","renderItem","_ref2","item","dropdownList","fontFamily","keyExtractor","create","flexDirection","width","height","borderRadius","backgroundColor","maxHeight","overflow","shadowOpacity","shadowRadius","shadowColor","shadowOffset","padding"],"sources":["/home/dci-student/DCIFolder/WAppV2/WeddingApp2.0/comp/Camera/fontHandler/FontFamilyDropdown.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, FlatList, Dimensions, StyleSheet } from 'react-native';\nimport axios from 'axios';\nimport { FontAwesome5 } from '@expo/vector-icons';\nimport { useLoadFonts, fontMap } from '../../fonts/useLoadFonts.js'\n\n\nexport function FontFamilyDropdown({ onFontFamilyChange }) {\n    const [isOpen, setIsOpen] = useState(false);\n    const fontsLoaded = useLoadFonts();\n\n\n    useEffect(() => {\n        axios.get('https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyCfy_P6OLwoben3quj00uUyvRxOFBWs-Bo')\n            .then(response => {\n                const kursiveFonts = response.data.items.filter(font => font.category === 'handwriting').map(font => font.family);\n                setGoogleFonts(kursiveFonts);\n            })\n            .catch(error => {\n                console.error(\"Error fetching fonts from Google Fonts API: \", error);\n            });\n    }, []);\n\n    const toggleDropdown = () => {\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <View style={styles.dropdownContainer}>\n            <TouchableOpacity style={styles.iconDropdown} onPress={toggleDropdown}>\n                <FontAwesome5 name=\"font\" size={24} color=\"black\" />\n            </TouchableOpacity>\n\n            {isOpen && (\n                <View style={styles.dropdownMenu}>\n                    <FlatList\n                        data={googleFonts}\n                        renderItem={({ item: font }) => (\n                            <TouchableOpacity\n                                style={styles.dropdownList}\n                                onPress={() => {\n                                    onFontFamilyChange(font);\n                                    setIsOpen(false);\n                                }}\n                            >\n                                <Text style={{ fontFamily: font }}>{font}</Text>\n                            </TouchableOpacity>\n                        )}\n                        keyExtractor={(font) => font}\n                    />\n                </View>\n            )}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    dropdownContainer: {\n        flexDirection: 'row',\n    },\n    iconDropdown: {\n        width: 32,\n        height: 32,\n        borderRadius: 16,\n        backgroundColor: '#f5f5f5',\n    },\n    dropdownMenu: {\n        maxHeight: 150,\n        overflow: 'scroll',\n        borderRadius: 8,\n        shadowOpacity: 0.1,\n        shadowRadius: 10,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        backgroundColor: '#fff',\n        padding: 10,\n    },\n    dropdownList: {\n        padding: 10,\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}