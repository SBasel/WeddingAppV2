{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { auth } from \"../comp/firbase/firebase.settings\";\nimport { signInThisUserWithEmailAndPassword } from \"../comp/firbase/auth/auth.emailAndPassword\";\nimport { SignInWithGooglePopup } from \"../comp/firbase/auth/auth.googlePopup\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Login() {\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    email = _React$useState2[0],\n    setEmail = _React$useState2[1];\n  var _React$useState3 = React.useState(''),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    password = _React$useState4[0],\n    setPassword = _React$useState4[1];\n  var _React$useState5 = React.useState(''),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    err = _React$useState6[0],\n    setErr = _React$useState6[1];\n  var emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  var handleEmailLogin = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!emailRegex.test(email)) {\n        setErr(\"The email must be a valid email format.\");\n        return;\n      }\n      if (!password) {\n        setErr(\"The Password field must not be empty.\");\n        return;\n      }\n      try {\n        yield signInThisUserWithEmailAndPassword(auth, email, password);\n      } catch (error) {\n        console.error(\"Error logging in with email and password:\", error);\n      }\n    });\n    return function handleEmailLogin() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: \"Login to TSM2.0\"\n    }), err ? _jsx(Text, {\n      style: {\n        color: 'red'\n      },\n      children: err\n    }) : null, _jsx(TextInput, {\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: setEmail,\n      style: {\n        borderWidth: 1,\n        width: 200,\n        marginBottom: 10\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Password\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true,\n      style: {\n        borderWidth: 1,\n        width: 200,\n        marginBottom: 10\n      }\n    }), _jsx(Button, {\n      title: \"Login with Email\",\n      onPress: handleEmailLogin\n    }), _jsx(Button, {\n      title: \"Login with Google\",\n      onPress: SignInWithGooglePopup\n    })]\n  });\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  heading: {\n    fontSize: 24\n  }\n});","map":{"version":3,"names":["React","View","Text","Button","TextInput","StyleSheet","auth","signInThisUserWithEmailAndPassword","SignInWithGooglePopup","jsx","_jsx","jsxs","_jsxs","Login","_React$useState","useState","_React$useState2","_slicedToArray","email","setEmail","_React$useState3","_React$useState4","password","setPassword","_React$useState5","_React$useState6","err","setErr","emailRegex","handleEmailLogin","_ref","_asyncToGenerator","test","error","console","apply","arguments","style","styles","container","children","heading","color","placeholder","value","onChangeText","borderWidth","width","marginBottom","secureTextEntry","title","onPress","create","flex","backgroundColor","alignItems","justifyContent","fontSize"],"sources":["/home/dci-student/DCIFolder/TMSII/my-app/comp/Login.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, Button, TextInput, StyleSheet } from 'react-native';\nimport { auth } from \"../comp/firbase/firebase.settings\";\nimport { signInThisUserWithEmailAndPassword } from '../comp/firbase/auth/auth.emailAndPassword';\nimport { SignInWithGooglePopup } from '../comp/firbase/auth/auth.googlePopup';\n\nexport function Login() {\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [err, setErr] = React.useState('');\n\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n  const handleEmailLogin = async () => {\n    if (!emailRegex.test(email)) {\n      setErr(\"The email must be a valid email format.\");\n      return;\n    }\n    if (!password) {\n      setErr(\"The Password field must not be empty.\");\n      return;\n    }\n\n    try {\n      await signInThisUserWithEmailAndPassword(auth, email, password);\n      // Navigate the user to your app's main screen after logging in\n    } catch (error) {\n      // Handle the error here\n      console.error(\"Error logging in with email and password:\", error);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Login to TSM2.0</Text>\n      {err ? <Text style={{color: 'red'}}>{err}</Text> : null}\n      <TextInput\n        placeholder=\"Email\"\n        value={email}\n        onChangeText={setEmail}\n        style={{ borderWidth: 1, width: 200, marginBottom: 10 }}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n        style={{ borderWidth: 1, width: 200, marginBottom: 10 }}\n      />\n      <Button title=\"Login with Email\" onPress={handleEmailLogin} />\n      <Button title=\"Login with Google\" onPress={SignInWithGooglePopup} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  heading: {\n    fontSize: 24,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}